<?xml version='1.0' encoding='utf-8'?>
<spec xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:style="http://siyavula.com/cnxml/style/0.1" xmlns:its="http://www.w3.org/2005/11/its">
  <entry>
    <xpath>/document</xpath>
    <children>
      <optional>metadata</optional><!-- occurs 0 or 1 times -->
      <element>content</element><!-- occurs exactly once -->
    </children>
    <notext/>
    <documentation>
The document element is the root.
It may have a metadata element and must have a content element.
    </documentation>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/metadata</xpath>
    <children>
      <subset-of><!-- subsetsof: at most one of each in the set; unordered -->
	<element>cnxml-version</element>
	<element>pspicture-generator-version</element>
      </subset-of>
    </children>
    <notext/>
    <documentation>
The metadata section contains information about the XML document itself.
Only version numbers at this time.
You must not edit this section manually, unless you really know what you're doing.
    </documentation>
    <conversion-callback name="latex">
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/metadata/cnxml-version</xpath>
    <text>
      <pre-processing-callback>strip</pre-processing-callback>
    </text>
    <validation-callback>is_version_number</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/metadata/pspicture-generator-version</xpath>
    <text>
      <pre-processing-callback>strip</pre-processing-callback>
    </text>
    <validation-callback>is_version_number</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content</xpath>
    <children>
      <one-of>
	<any-number>
	  <element>section</element>
	</any-number>
	<reference>block-element</reference>
      </one-of>
    </children>
    <notext/>
    <conversion-callback name="latex">
return self.text.strip()
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//activity/section</xpath>
    <children>
      <element>title</element>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'ActivitySection'
return '\n\\begin{' + environment + '}{' + self.attrib['title'] + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//activity/section/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//section</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>type</name>
	<type>enum("chapter","section","subsection","subsubsection")</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <element>title</element>
      <optional>shortcode</optional><!--TODO: this should be required-->
      <reference>block-element</reference>
    </children>
    <notext/>
    <conversion-callback name="latex">
return self.text.strip()
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//section/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
level = -1
node = self.getparent()
while node is not None:
    if node.tag == 'section':
        level += 1
    node = node.getparent()
section = ['chapter', 'section', 'subsection', 'subsubsection'][level]
return '\\%s{%s}\n'%(section, self.text)
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//section/shortcode</xpath>
    <validation-callback>is_section_shortcode</validation-callback>
    <conversion-callback name="latex">
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//para</xpath>
    <children>
      <reference>inline-container-element</reference>
    </children>
    <conversion-callback name="latex">
return '\\par\n' + ' '.join(self.text.strip().split()) + '\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//list</xpath>
    <attributes>
      <entry>
	<name>list-type</name>
	<type>enum("bulleted","enumerated")</type>
	<default>bulleted</default>
      </entry>
      <entry>
	<name>start-value</name>
	<type>integer(1,)</type>
	<default>1</default>
      </entry>
      <entry>
	<name>mark-prefix</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>number-style</name>
	<type>enum("arabic","upper-alpha","lower-alpha","upper-roman","lower-roman")</type>
	<default>arabic</default>
      </entry>
    </attributes>
    <children>
      <any-number from="1">
	<element>item</element>
      </any-number>
    </children>
    <notext/>
    <conversion-callback name="latex">
listType = self.attrib['list-type']
if listType == 'bulleted':
    environment = 'itemize'
elif listType == 'enumerated':
    environment = 'enumerate'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//list/item</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
return r'\item ' + self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises</xpath>
    <children>
      <optional>title</optional>
      <any-number>
	<element>entry</element>
      </any-number>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'Exercise'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises/entry</xpath>
    <children>
      <any-number from="1"><!-- FIXME: This is a hack since multiple shortcodes have to point to the same thing in some exercises. This needs to become stricter since we cannot render multiple shortcodes in the book for one exercises. -->
	<element>shortcode</element>
      </any-number>
      <element>problem</element>
      <element>solution</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'ExerciseEntry'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises/entry/shortcode</xpath>
    <validation-callback>is_exercise_shortcode</validation-callback>
    <conversion-callback name="latex">
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises/entry/problem</xpath>
    <children>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'ExerciseEntryProblem'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises/entry/solution</xpath>
    <attributes>
      <entry>
	<name>url</name>
	<type>url</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
    <conversion-callback name="latex">
return '' # Leave solutions out of textbook
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//definition</xpath>
    <children>
      <element>term</element>
      <element>meaning</element>
    </children>
    <notext/>
    <conversion-callback name="latex"><!-- type already creates start of environment -->
environment = 'Definition'
return '\n\\begin{' + environment + '}{' + self.attrib['title'] + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//definition/term</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//definition/meaning</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//rule</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
      </entry>
      <entry>
	<name>type</name>
	<type>enum("theorem")</type>
      </entry>
    </attributes>
    <children>
      <element>title</element>
      <element>statement</element>
      <element>proof</element>
    </children>
    <notext/>
  </entry>

  <entry>
    <xpath>/document/content//rule/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
  </entry>

  <entry>
    <xpath>/document/content//rule/statement</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
  </entry>

  <entry>
    <xpath>/document/content//rule/proof</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
  </entry>

  <entry>
    <xpath>/document/content//activity</xpath>
    <attributes>
      <entry>
	<name>type</name>
	<type>enum("activity","groupdiscussion","casestudy","investigation","f_experiment","i_experiment")</type>
      </entry>
    </attributes>
    <children>
      <element>title</element>
      <reference>block-element</reference>
    </children>
    <notext/>
    <conversion-callback name="latex"><!-- type already creates start of environment -->
activityType = self.attrib['type']
if activityType == 'f_experiment':
    environment = 'FormalExperiment'
elif activityType == 'i_experiment':
    environment = 'InformalExperiment'
else:
    environment = activityType.capitalize()
return '\n\\begin{' + environment + '}{' + self.attrib['title'] + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//activity/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//note</xpath>
    <attributes>
      <entry>
	<name>type</name>
	<type>enum("tip")</type>
      </entry>
    </attributes>
    <children>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
    <conversion-callback name="latex"><!-- type already creates start of environment -->
environment = 'Tip'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//math_identity</xpath>
    <children>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
    <conversion-callback name="latex"><!-- type already creates start of environment -->
environment = 'Identity'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//math_extension</xpath>
    <children>
      <element>title</element>
      <element>body</element>
    </children>
    <notext/>
    <conversion-callback name="latex"><!-- type already creates start of environment -->
environment = 'Extension'
return '\n\\begin{' + environment + '}{' + self.attrib['title'] + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//math_extension/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//math_extension/body</xpath>
    <children>
      <reference>block-element-no-subsections</reference>
    </children>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//worked_example</xpath>
    <children>
      <element>title</element>
      <element>question</element>
      <element>answer</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'Wex'
return '\n\\begin{' + environment + '}{' + self.attrib['title'] + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//worked_example/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//worked_example/question</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
environment = 'WexQuestion'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//worked_example/answer</xpath>
    <children>
      <one-of>
	<any-number from="1">
	  <element>workstep</element>
	</any-number>
	<reference>block-element-no-subsections</reference>
      </one-of>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'WexAnswer'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//worked_example/answer/workstep</xpath>
    <children>
      <element>title</element>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'WexStep'
return '\n\\begin{' + environment + '}{' + self.attrib['title'] + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//worked_example/answer/workstep/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//presentation</xpath>
    <children>
      <unordered>
	<element>title</element>
	<element>shortcode</element>
	<element>url</element>
      </unordered>
    </children>
    <conversion-callback name="latex">
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//presentation/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//presentation/shortcode</xpath>
    <validation-callback>is_rich_media_shortcode</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//presentation/url</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//simulation</xpath>
    <children>
      <unordered>
	<element>title</element>
	<element>shortcode</element>
	<element>url</element>
	<element>embed</element>
	<optional>width</optional>
	<optional>height</optional>
      </unordered>
    </children>
    <validation-callback>simulation_has_url_or_embed</validation-callback>
    <conversion-callback name="latex">
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//simulation/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//simulation/shortcode</xpath>
    <validation-callback>is_rich_media_shortcode</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//simulation/width</xpath>
    <validation-callback>is_integer</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//simulation/height</xpath>
    <validation-callback>is_integer</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//simulation/url</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//simulation/embed</xpath>
    <validation-callback>is_valid_html</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//video</xpath>
    <children>
      <element>title</element>
      <element>shortcode</element>
      <element>url</element>
      <optional>width</optional>
      <optional>height</optional>
      <optional>url</optional>
    </children>
    <conversion-callback name="latex">
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//video/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//video/shortcode</xpath>
    <validation-callback>is_rich_media_shortcode</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//video/url</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//video/width</xpath>
    <validation-callback>is_integer</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//video/height</xpath>
    <validation-callback>is_integer</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//figure</xpath>
    <children>
      <element>type</element>
      <any-number from="1">
	<one-of>
	  <element>table</element>
	  <element>pspicture</element>
	  <element>tikzpicture</element>
	  <element>image</element>
	  <element>para</element>
	  <element>equation</element>
	  <element>latex</element>
	</one-of>
      </any-number>
      <optional>caption</optional>
    </children>
    <notext/>
    <conversion-callback name="latex"><!-- type already creates start of environment -->
environment = self.attrib['type'].capitalize()
result = '\n\\begin{' + environment + '}\n' + self.text
id = self.attrib.get('id')
if id is not None:
    result += r'\label{' + id + '}\n'
result += r'\end{' + environment + '}\n'
return result
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//pspicture</xpath>
    <attributes>
      <entry>
	<name>style:width</name>
	<type>number</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <any-number>
	<element>usepackage</element>
      </any-number>
      <element>code</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
if self.attrib.get('{http://siyavula.com/cnxml/style/0.1}width') is not None:
    warning_message('UNHANDLED style:width in pspicture')
return r'\par\begin{pspicture}' + self.text + r'\end{pspicture}' + '\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//pspicture/usepackage</xpath>
    <conversion-callback name="latex">
warning_message('REQUIRED PSTRICKS PACKAGE: ' + self.text)
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//pspicture/code</xpath>
    <children>
      <any-number>
	<one-of>
	  <element>unit_number</element>
	  <element>number</element>
	  <element>unit</element>
	  <element>percentage</element>
	  <element>currency</element>
	  <element>chem_compound</element>
	  <element>spec_note</element>
	  <element>nuclear_notation</element>
	</one-of>
      </any-number>
    </children>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//tikzpicture</xpath>
    <attributes>
      <entry>
	<name>style:width</name>
	<type>number</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <any-number>
	<element>usepackage</element>
      </any-number>
      <element>code</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
if self.attrib.get('{http://siyavula.com/cnxml/style/0.1}width') is not None:
    warning_message('UNHANDLED style:width in tikzpicture')
return r'\begin{tikzpicture}' + self.text + r'\end{tikzpicture}' + '\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//tikzpicture/usepackage</xpath>
    <conversion-callback name="latex">
warning_message('REQUIRED TIKZ PACKAGE: ' + self.text)
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//tikzpicture/code</xpath>
    <children>
      <any-number>
	<one-of>
	  <element>unit_number</element>
	  <element>number</element>
	  <element>unit</element>
	  <element>percentage</element>
	  <element>currency</element>
	  <element>chem_compound</element>
	  <element>spec_note</element>
	  <element>nuclear_notation</element>
	</one-of>
      </any-number>
    </children>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//image</xpath>
    <attributes>
      <entry>
	<name>style:width</name>
	<type>number</type>
	<default/>
      </entry>
      <!--<entry>
	<name>style:format</name>
	<type>string</type>
	<default/>
      </entry>-->
    </attributes>
    <children>
      <element>src</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
result = r'\includegraphics'
width = self.attrib.get('{http://siyavula.com/cnxml/style/0.1}width')
if width is not None:
    result += r'[width=%s\textwidth]'%width
result += '{' + self.attrib['src'] + '}\n'
return result
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//image/src</xpath>
    <conversion-callback name="latex">
src = self.text.strip()
pos = src.rfind('.')
if pos != -1:
    extension = src[pos+1:]
else:
    extension = None
if extension != 'eps':
    oldSrc = src
    src = src[:-len(extension)] + 'eps'
    convert_image(oldSrc, src)
self.getparent().attrib['src'] = src
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//figure/type</xpath>
    <validation-callback>is_figure_type</validation-callback>
    <conversion-callback name="latex">
self.getparent().attrib['type'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//figure/caption</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
return r'  \Caption{' + self.text + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//table</xpath>
    <attributes>
      <entry>
	<name>frame</name>
	<type>enum("none")</type>
	<default/>
      </entry>
      <entry>
	<name>colsep</name>
	<type>integer</type>
	<default/>
      </entry>
      <entry>
	<name>rowsep</name>
	<type>integer</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <element>tgroup</element>
    </children>t
    <notext/>
    <conversion-callback name="latex">
columnAlignment = eval(self.attrib['latexColumnAlignment'])
return r'\par\begin{tabular}{|' + '|'.join(columnAlignment) + '|}\n' + self.text + r'\\' + '\n' + r'\hline' + '\n' + r'\end{tabular}' + '\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//table/tgroup</xpath>
    <attributes>
      <entry>
	<name>cols</name>
	<type>integer(1,)</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <any-number from="1">
	<element>colspec</element>
      </any-number>
      <element>tbody</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
cols = self.attrib.get('cols')
if cols is not None:
    if self.attrib.get('columnCount') is not None:
        assert self.attrib.get('columnCount') == cols, "Table column count specified in 'cols' attribute does not match number of columns in colspec."
    else:
        self.attrib['columnCount'] = cols
parentAttrib = self.getparent().attrib
parentAttrib['columnCount'] = self.attrib['columnCount']
parentAttrib['latexColumnAlignment'] = self.attrib['latexColumnAlignment']
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//table/tgroup/colspec</xpath>
    <attributes>
      <entry>
	<name>colname</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>colnum</name>
	<type>integer(1,)</type>
      </entry>
      <entry>
	<name>style:latex-alignment</name>
	<type>string</type>
	<default>c</default>
      </entry>
    </attributes>
    <notext/>
    <conversion-callback name="latex">
parentAttrib = self.getparent().attrib
parentAttrib['columnCount'] = str(int(parentAttrib.get('columnCount', '0')) + 1)
if parentAttrib.get('latexColumnAlignment') is None:
    parentAttrib['latexColumnAlignment'] = '[]'
parentAttrib['latexColumnAlignment'] = repr(eval(parentAttrib['latexColumnAlignment']) + [self.attrib['{http://siyavula.com/cnxml/style/0.1}latex-alignment']])
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//table/tgroup/tbody</xpath>
    <children>
      <any-number>
	<element>row</element>
      </any-number>
    </children>
    <notext/>
    <conversion-callback name="latex">
text = self.text.strip()
assert text[-2:] == r'\\', "Weird latex table error in /document/content//table/tgroup/tbody conversion."
return text[:-2] + '\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//table/tgroup/tbody/row</xpath>
    <children>
      <any-number>
	<element>entry</element>
      </any-number>
    </children>
    <notext/>
    <conversion-callback name="latex">
text = self.text.strip()
assert text[-1] == '&amp;', "Weird latex table error in /document/content//table/tgroup/tbody/row conversion."
return '\\hline\n' + text[:-1] + r' \\' + '\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//table/tgroup/tbody/row/entry</xpath>
    <attributes>
      <entry>
	<name>namest</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>nameend</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>align</name>
	<type>enum("center")</type>
	<default/>
      </entry>
      <entry>
	<name>morerows</name>
	<type>integer</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
return self.text.strip() + ' &amp;'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//equation</xpath>
    <children>
      <element>m:math</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//latex</xpath>
    <attributes>
      <entry>
	<name>display</name>
	<type>enum("inline","block")</type>
	<default>inline</default>
      </entry>
    </attributes>
    <children>
      <any-number>
	<one-of>
	  <element>number</element>
	  <element>unit</element>
	  <element>unit_number</element>
	  <element>percentage</element>
	  <element>currency</element>
	</one-of>
      </any-number>
    </children>
    <conversion-callback name="latex">
if self.attrib.get('display') is None:
    self.attrib['display'] = 'inline' # TODO: remove
if self.attrib['display'] == 'inline':
    return r'\(' + self.text + r'\)'
else:
    foundMathEnvironment = False
    text = self.text.strip()
    for environmentName in ['align', 'align*', 'equation', 'equation*', 'eqnarray', 'eqnarray*']:
        substr = r'\begin{%s}'%environmentName
        if text[:len(substr)] == substr:
            foundMathEnvironment = True
            break
    if not foundMathEnvironment:
        return '\\[\n' + self.text + '\n\\]\n'
    else:
        return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//m:math</xpath>
    <children>
      <reference>math-stuff</reference>
    </children>
    <notext/>
    <conversion-callback name="latex">
tex = mathml_transform(self)
tex = unicode(tex).replace('$', '')
if tex.count(r'\left') != tex.count(r'\right'):
    tex = tex.replace(r'\left', '').replace(r'\right', '')

# replace the stackrel{^} with hat
tex = tex.replace(r'\stackrel{^}', r'\hat')

# fix the \times symbol
tex = tex.replace(u'×', r'\times ')

# fix the trig functions too
for func in ['sin', 'cos', 'tan', 'cot']:
    tex = tex.replace(' ' + func, '\\' + func + ' ')

return r'\(' + tex + r'\)'
    </conversion-callback>
  </entry>

  <entry><xpath>/document/content//m:mrow</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mfrac</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mfenced</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mi</xpath><children><reference>math-stuff</reference></children><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mo</xpath><children><reference>math-stuff</reference></children><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mn</xpath><children><reference>math-stuff</reference></children><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mtable</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mtr</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mtd</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mtext</xpath><children><reference>math-stuff</reference></children><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:msub</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:msup</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:msubsup</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mspace</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mphantom</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mstyle</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mover</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:msqrt</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:munder</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:munderover</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mroot</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mref</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>

  <entry id="math-stuff">
    <children>
      <any-number>
	<one-of>
	  <element>m:mrow</element>
	  <element>m:mfrac</element>
	  <element>m:mfenced</element>
	  <element>m:mi</element>
	  <element>m:mo</element>
	  <element>m:mn</element>
	  <element>m:mtable</element>
	  <element>m:mtr</element>
	  <element>m:mtd</element>
	  <element>m:mtext</element>
	  <element>m:msub</element>
	  <element>m:msup</element>
	  <element>m:msubsup</element>
	  <element>m:mspace</element>
	  <element>m:mphantom</element>
	  <element>m:mstyle</element>
	  <element>m:mover</element>
	  <element>m:msqrt</element>
	  <element>m:munder</element>
	  <element>m:munderover</element>
	  <element>m:mroot</element>
	  <element>m:mref</element>
	</one-of>
      </any-number>
    </children>
  </entry>

  <entry id="block-element">
    <children>
      <any-number>
	<one-of>
	  <element>section</element>
	  <reference>block-element-no-subsections-entry</reference>
	</one-of>
      </any-number>
    </children>
  </entry>

  <entry id="block-element-no-subsections">
    <children>
      <any-number>
	<reference>block-element-no-subsections-entry</reference>
      </any-number>
    </children>
  </entry>

  <entry id="block-element-no-subsections-entry">
    <children>
      <one-of>
	<element>para</element>
	<element>video</element>
	<element>presentation</element>
	<element>simulation</element>
	<element>list</element>
	<element>equation</element>
	<element>latex</element>
	<element>worked_example</element>
	<element>figure</element>
	<element>image</element>
	<element>pspicture</element>
	<element>tikzpicture</element>
	<element>table</element>
	<element>definition</element>
	<element>rule</element>
	<element>activity</element>
	<element>exercises</element>
	<element>note</element>
	<element>math_extension</element>
	<element>math_identity</element>

	<element>todo</element><!-- This needs to go away before publising the print textbooks -->
      </one-of>
    </children>
  </entry>

  <entry id="inline-container-element">
    <children>
      <any-number>
	<one-of>
	  <element>br</element>
	  <element>emphasis</element>
	  <element>sub</element>
	  <element>sup</element>
	  <element>list</element>
	  <element>media</element>
	  <element>image</element>
	  <element>link</element>
	  <element>unit_number</element>
	  <element>number</element>
	  <element>unit</element>
	  <element>percentage</element>
	  <element>currency</element>
	  <element>m:math</element>
	  <element>latex</element>
	  <element>chem_compound</element>
	  <element>spec_note</element>
	  <element>nuclear_notation</element>

	  <element>todo</element><!-- This needs to go away before publising the print textbooks -->
	</one-of>
      </any-number>
    </children>
  </entry>

  <entry id="inline-element">
    <children>
      <any-number>
	<one-of>
	  <element>br</element>
	  <element>emphasis</element>
	  <element>sub</element>
	  <element>sup</element>
	  <element>link</element>
	  <element>unit_number</element>
	  <element>number</element>
	  <element>unit</element>
	  <element>percentage</element>
	  <element>currency</element>
	  <element>m:math</element>
	  <element>latex</element>
	  <element>chem_compound</element>
	  <element>spec_note</element>
	  <element>nuclear_notation</element>
	</one-of>
      </any-number>
    </children>
  </entry>

  <entry>
    <xpath>/document/content//unit_number</xpath>
    <children>
      <element>number</element>
      <element>unit</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <!-- //currency/number shadows //number -->
  <entry>
    <xpath>/document/content//currency/number</xpath>
    <validation-callback>is_float</validation-callback>
  </entry>

  <entry>
    <xpath>/document/content//number</xpath>
    <children>
      <subset-of>
	<element>coeff</element>
	<element>base</element>
	<element>exp</element>
      </subset-of>
    </children>
    <validation-callback>is_number</validation-callback>
    <conversion-callback name="latex">
if len(self) == 0:
    if 'e' in self.text:
        # Number in exponential notation: convert to coeff and exp
        numberText = self.text.strip()
        self.text = None
        self.append(etree.Element('coeff'))
        pos = numberText.find('e')
        self[-1].text = numberText[:pos]
        self.append(etree.Element('exp'))
        self[-1].text = str(int(numberText[pos+1:]))
    else:
        # No children, means it's just a plain number
        numberText = self.text.strip()
        self.text = None
        self.append(etree.Element('coeff'))
        self[-1].text = numberText

# Parse out coefficient, base and exponent
nodes = {}
text = {}
for key in ['coeff', 'exp', 'base']:
    nodes[key] = self.find(key)
    text[key] = nodes[key].text.strip() if nodes[key] is not None else None
if text['base'] is None:
    text['base'] = '10'
for key in text:
    if text[key] is None: continue
    if text[key][0] == '-':
        minus = '-'
        text[key] = text[key][1:]
    else:
        minus = ''
    text[key] = minus + r'\text{' + utils.format_number(text[key], thousandsSeparator=r'\ ') + '}'

# Build LaTeX representation
result = text['coeff'] if nodes['coeff'] is not None else ''
if nodes['exp'] is not None:
    if nodes['coeff'] is not None:
        result += r'\ \times\ '
    result += text['base'] + '^{' + text['exp'] + '}'

# Check whether already in math mode
latexMode = ('latex' in utils.get_full_dom_path(self))
if not latexMode:
    result = r'\(' + result + r'\)'

return result
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//number/coeff</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//number/base</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//number/exp</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//unit</xpath>
    <children>
      <any-number>
	<element>sup</element>
      </any-number>
    </children>
    <validation-callback>is_unit</validation-callback>
    <conversion-callback name="latex">
unitsWithoutSpace = [u'°', u'℃']
inUnitNumber = (self.getparent().tag == 'unit_number')
result = r'\text{' + self.text + '}'
# Check whether already in math mode
latexMode = ('latex' in utils.get_full_dom_path(self))
if not latexMode:
    result = r'\(' + result + r'\)'
    if inUnitNumber and (self.text[0] not in unitsWithoutSpace):
        result = '~' + result
else:
    if inUnitNumber and (self.text[0] not in unitsWithoutSpace):
        assert result[:6] == r'\text{', "Weird error in /document/content//unit conversion."
        result = result[:6] + ' ' + result[6:]
return result
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//unit/sup</xpath>
    <validation-callback>is_number</validation-callback>
    <conversion-callback name="latex">
return '$^{' + self.text + '}$'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//percentage</xpath>
    <validation-callback>is_float</validation-callback>
    <conversion-callback name="latex">
return convert_using(self, '/document/content//number') + r'\%'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//currency</xpath>
    <attributes>
      <entry>
	<name>precision</name>
	<type>integer</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <unordered>
	<optional>symbol</optional>
	<element>number</element>
      </unordered>
    </children>
    <notext/>
  </entry>

  <entry>
    <xpath>/document/content//currency/symbol</xpath>
    <attributes>
      <entry>
	<name>location</name>
	<type>enum("front","back")</type>
	<default>front</default>
      </entry>
    </attributes>
  </entry>

  <entry>
    <xpath>/document/content//chem_compound</xpath>
    <conversion-callback name="latex">
text = self.text.strip()
pos = 0
while pos &lt; len(text):
    if text[pos].isalpha():
        start = pos
        pos += 1
        while (pos &lt; len(text)) and text[pos].isalpha():
            pos += 1
        text = text[:start] + r'\text{' + text[start:pos] + '}' + text[pos:]
        pos += 7
    else:
        pos += 1
latexMode = ('latex' in utils.get_full_dom_path(self))
if not latexMode:
    text = r'\(' + text + r'\)'
return text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//spec_note</xpath>
    <conversion-callback name="latex">
return convert_using(self, '/document/content//chem_compound')
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//nuclear_notation</xpath>
    <children>
      <unordered>
	<element>symbol</element>
	<element>mass_number</element>
	<element>atomic_number</element>
      </unordered>
    </children>
    <notext/>
    <validation-callback>is_nuclear_notation</validation-callback>
    <conversion-callback name="latex">
latex = r'_{%s}^{%s}\text{%s}'%(self.find('atomic_number').text, self.find('mass_number').text, self.find('symbol').text)
latexMode = ('latex' in utils.get_full_dom_path(self))
if not latexMode:
    latex = r'\(' + latex + r'\)'
return latex
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//nuclear_notation/symbol</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//nuclear_notation/mass_number</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//nuclear_notation/atomic_number</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//br</xpath>
    <notext/>
    <conversion-callback name="latex">
return r'\\'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//emphasis</xpath>
    <attributes>
      <entry>
	<name>effect</name>
	<type>enum("bold","italics","underline","smallcaps","normal")</type>
	<default>bold</default>
      </entry>
    </attributes>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
pattern = {
    'bold': r'\textbf{%s}',
    'italics': r'\textit{%s}',
    'underline': r'\ul{%s}', # requires soul package
    'smallcaps': r'\textsc{%s}',
    'normal': '%s',
}[self.attrib['effect']]
return pattern%self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//link</xpath>
    <attributes>
      <entry>
	<name>url</name>
	<type>url</type>
	<default/>
      </entry>
      <entry>
	<name>target-id</name>
	<type>string</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <reference>inline-element</reference>
    </children>
    <validation-callback>check_link_element</validation-callback>
    <conversion-callback name="latex">
target = self.attrib.get('target-id')
if target is not None:
    return r'\ref{' + target + '}'
url = self.attrib.get('url')
if url is not None:
    if self.text != '':
        return r'\href{' + url + '}{' + self.text + '}'
    else:
        return r'\url{' + url + '}'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//sub</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
  </entry>

  <entry>
    <xpath>//its:rules</xpath>
    <attributes>
      <entry>
	<name>version</name>
	<type>string</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <element>its:translateRule</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>//its:rules/its:translateRule</xpath>
    <attributes>
      <entry>
	<name>translate</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>selector</name>
	<type>string</type>
	<default/>
      </entry>
    </attributes>
    <notext/>
    <conversion-callback name="latex">
return ''
    </conversion-callback>
  </entry>

</spec>
