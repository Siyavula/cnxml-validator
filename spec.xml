<?xml version="1.0" encoding="utf-8"?>
<spec xmlns:m="http://www.w3.org/1998/Math/MathML" xmlns:style="http://siyavula.com/cnxml/style/0.1" xmlns:its="http://www.w3.org/2005/11/its">
  <entry>
    <xpath>/document</xpath>
    <children>
      <optional>its:rules</optional>
      <optional>metadata</optional><!-- occurs 0 or 1 times -->
      <element>content</element><!-- occurs exactly once -->
    </children>
    <notext/>
    <documentation>
The document element is the root.
It may have a metadata element and must have a content element.
    </documentation>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/metadata</xpath>
    <children>
      <subset-of><!-- subsetsof: at most one of each in the set; unordered -->
	<element>cnxml-version</element>
	<element>pspicture-generator-version</element>
      </subset-of>
    </children>
    <notext/>
    <documentation>
The metadata section contains information about the XML document itself.
Only version numbers at this time.
You must not edit this section manually, unless you really know what you're doing.
    </documentation>
    <conversion-callback name="latex">
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/metadata/cnxml-version</xpath>
    <text>
      <pre-processing-callback>strip</pre-processing-callback>
    </text>
    <validation-callback>is_version_number</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/metadata/pspicture-generator-version</xpath>
    <text>
      <pre-processing-callback>strip</pre-processing-callback>
    </text>
    <validation-callback>is_version_number</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content</xpath>
    <children>
      <one-of>
	<any-number>
	  <element>section</element>
	</any-number>
	<reference>block-element</reference>
      </one-of>
    </children>
    <notext/>
    <conversion-callback name="latex">
return self.text.strip()
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//activity/section</xpath>
    <children>
      <element>title</element>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'ActivitySection'
return '\n\\begin{' + environment + '}{' + self.attrib['title'] + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//activity/section/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//section</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>type</name>
	<type>enum("chapter","section","subsection","subsubsection","subsubsubsection")</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <element>title</element>
      <optional>shortcode</optional><!--TODO: this should be required-->
      <reference>block-element</reference>
    </children>
    <notext/>
    <conversion-callback name="latex">
result = self.text.strip()
if self.attrib.get('shortcode') is not None:
    pass
    #result = r'\setsectionshortcode{' + self.attrib['shortcode'] + '}\n' + result
return result
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//teachers-guide</xpath>
    <children>
      <reference>block-element</reference>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = "TeachersGuide"
return '\n\\begin{' + environment + '}\n' + self.text.strip() + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//section/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
level = -1
node = self.getparent()
while node is not None:
    if node.tag == 'section':
        level += 1
    node = node.getparent()
sections = ['chapter', 'section', 'subsection', 'subsubsection', 'paragraph']
if level >= len(sections):
    warning_message("Exceeded maximum section level (title: %s)"%(repr(self.text)))
    section = sections[-1]
else:
    section = sections[level]
return '\\%s{%s}\n'%(section, self.text)
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//section/shortcode</xpath>
    <validation-callback>is_section_shortcode</validation-callback>
    <conversion-callback name="latex">
self.getparent().attrib['shortcode'] = self.text
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//para</xpath>
    <children>
      <reference>inline-container-element</reference>
    </children>
    <conversion-callback name="latex">
text = ' '.join(self.text.strip().split())
pos = text.find('"')
if pos != -1:
    warning_message('Straight double quote in text, consider replacing with left/right quotes: %s'%repr(text[pos-20:pos+20]))
return '\\par\n' + text + '\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//list</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>list-type</name>
	<type>enum("bulleted","enumerated")</type>
	<default>bulleted</default>
      </entry>
      <entry>
	<name>start-value</name>
	<type>integer(1,)</type>
	<default>1</default>
      </entry>
      <entry>
	<name>mark-prefix</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>number-style</name>
	<type>enum("arabic","upper-alpha","lower-alpha","upper-roman","lower-roman")</type>
	<default>arabic</default>
      </entry>
    </attributes>
    <children>
      <any-number from="1">
	<element>item</element>
      </any-number>
    </children>
    <notext/>
    <conversion-callback name="latex">
listType = self.attrib['list-type']
if listType == 'bulleted':
    environment = 'ListBulleted'
elif listType == 'enumerated':
    environment = 'ListEnumerated'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//list/item</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
return r'\item ' + self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//table</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>frame</name>
	<type>enum("none",)</type>
	<default/>
      </entry>
      <entry>
	<name>colsep</name>
	<type>integer</type>
	<default/>
      </entry>
      <entry>
	<name>rowsep</name>
	<type>integer</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <element>tgroup</element>
    </children>t
    <notext/>
    <conversion-callback name="latex">
tabularNewline = r'\tabularnewline'
columnAlignment = eval(self.attrib['latexColumnAlignment'])
return r'\par'+'\n'+r'\begin{Table}{|' + '|'.join(columnAlignment) + '|}\n' + self.text + tabularNewline + '\n' + r'\hline' + '\n' + r'\end{Table}' + '\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//table/tgroup</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>cols</name>
	<type>integer(1,)</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <any-number from="1">
	<element>colspec</element>
      </any-number>
      <element>tbody</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
cols = self.attrib.get('cols')
if cols is not None:
    if self.attrib.get('columnCount') is not None:
        assert self.attrib.get('columnCount') == cols, "Table column count specified in 'cols' attribute does not match number of columns in colspec."
    else:
        self.attrib['columnCount'] = cols
parentAttrib = self.getparent().attrib
parentAttrib['columnCount'] = self.attrib['columnCount']
parentAttrib['latexColumnAlignment'] = self.attrib['latexColumnAlignment']
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//table/tgroup/colspec</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>colname</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>colnum</name>
	<type>integer(1,)</type>
      </entry>
      <entry>
	<name>colwidth</name>
	<type>string</type> <!-- 475.4 -->
	<default/>
      </entry>
      <entry>
	<name>style:latex-alignment</name>
	<type>string</type>
	<default/> <!-- default: c -->
      </entry>
    </attributes>
    <notext/>
    <conversion-callback name="latex">
parentAttrib = self.getparent().attrib
parentAttrib['columnCount'] = str(int(parentAttrib.get('columnCount', '0')) + 1)
columnSpec = eval(parentAttrib.get('columnSpec', '{}'))
columnSpec[self.attrib.get('colname')] = int(self.attrib['colnum'])-1
parentAttrib['columnSpec'] = repr(columnSpec)

latexAlignmentKey = '{http://siyavula.com/cnxml/style/0.1}latex-alignment'
if parentAttrib.get('latexColumnAlignment') is None:
    parentAttrib['latexColumnAlignment'] = '[]'
if self.attrib.get(latexAlignmentKey) is None:
    colwidth = self.attrib.get('colwidth')
    if colwidth is not None:
        # Set LaTeX column width based on colwidth attribute
        assert colwidth[-2:] == 'pt'
        colwidth = float(colwidth[:-2])
        relativeWidth = colwidth / 480
        self.attrib[latexAlignmentKey] = r'&gt;{\centering}p{%.6f\textwidth}'%(0.85*relativeWidth)
    else:
        # Set default value
        self.attrib[latexAlignmentKey] = 'c'
parentAttrib['latexColumnAlignment'] = repr(eval(parentAttrib['latexColumnAlignment']) + [self.attrib[latexAlignmentKey]])

return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//table/tgroup/tbody</xpath>
    <children>
      <any-number>
	<element>row</element>
      </any-number>
    </children>
    <notext/>
    <conversion-callback name="latex">
tabularNewline = r'\tabularnewline'
text = self.text.strip()
assert text[-len(tabularNewline):] == tabularNewline, "Weird latex table error in /document/content//table/tgroup/tbody conversion."
return text[:-len(tabularNewline)] + '\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//table/tgroup/tbody/row</xpath>
    <children>
      <any-number>
	<element>entry</element>
      </any-number>
    </children>
    <notext/>
    <conversion-callback name="latex">
tabularNewline = r'\tabularnewline'
text = self.text.strip()
assert text[-1] == '&amp;', "Weird latex table error in /document/content//table/tgroup/tbody/row conversion."
return '\\hline\n' + text[:-1] + tabularNewline + '\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//table/tgroup/tbody/row/entry</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>namest</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>nameend</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>align</name>
	<type>enum("center",)</type>
	<default/>
      </entry>
      <entry>
	<name>morerows</name>
	<type>integer</type>
	<default>0</default>
      </entry>
    </attributes>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
multiColumnStart = self.attrib.get('namest')
multiColumnEnd = self.attrib.get('nameend')
moreRows = int(self.attrib['morerows'])
if (multiColumnStart is not None) and (multiColumnEnd is not None):
    if moreRows &gt; 0:
        error_message('Cannot handle table entries that span multiple rows and columns')
    columnSpec = eval(self.getparent().getparent().getparent().attrib.get('columnSpec'))
    columnCount = columnSpec[multiColumnEnd] - columnSpec[multiColumnStart] + 1
else:
    columnCount = 1
if columnCount &gt; 1:
    return r'\multicolumn{' + str(columnCount) + r'}{|c|}{' + self.text.strip() + r'} &amp;'
else:
    if moreRows &gt; 0:
        text = self.text.strip()
        while text[:4] == r'\par':
            text = text[4:].lstrip()
        while text[-4:] == r'\par':
            text = text[:-4].rstrip()
        return r'\multirow{' + str(moreRows+1) + '}{*}{' + text + r'} &amp;'
    else:
        return self.text.strip() + ' &amp;'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises</xpath>
    <children>
      <optional>title</optional>
      <element>problem-set</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'Exercises'
return '\n\\begin{' + environment + '}{' + self.attrib.get('title', '') + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises//problem-set</xpath>
    <attributes>
      <entry>
	<name>style:columns</name>
	<type>integer(1,)</type>
	<default>1</default>
      </entry>
    </attributes>
    <children>
      <optional>header</optional>
      <any-number>
	<one-of>
	  <element>problem-set</element>
	  <element>entry</element>
	  <element>monassis-template</element>
	</one-of>
      </any-number>
      <optional>footer</optional>
    </children>
    <notext/>
    <conversion-callback name="latex">
problemsetEnvironment = 'ExercisesProblemset'
#entryEnvironment = 'ExercisesProblemsetEntry' # HACK to solve number scrunching problem
entriesEnvironment = 'enumerate' # 'ExercisesProblemsetEntries' # HACK to solve number scrunching problem
if self.getparent().tag == 'exercises':
    # First level of numbering in exercise environment
    return '\n\\begin{' + problemsetEnvironment + '}\n' + self.text + r'\end{' + problemsetEnvironment + '}\n'
else:
    columnCount = int(self.getparent().attrib['{http://siyavula.com/cnxml/style/0.1}columns'])
    if columnCount > 1:
        columnsBegin = r'\begin{ExercisesProblemsetColumns}{' + str(columnCount) + '}\n'
        columnsEnd = '\\end{ExercisesProblemsetColumns}\n'
    else:
        columnsBegin = ''
        columnsEnd = ''

    count = int(self.getparent().attrib.get('problem-set-entry-count', 0)) + 1
    self.getparent().attrib['problem-set-entry-count'] = str(count)
    if count == 1:
        # First entry in problem set
        result = '\n' + columnsBegin + r'\begin{' + entriesEnvironment + '}'
    else:
        result = ''

    # HACK to solve number scrunching problem
    # result += '\n\\begin{' + entryEnvironment + '}\n\\begin{' + problemsetEnvironment + '}\n' + self.text + r'\end{' + problemsetEnvironment + '}\n' + r'\end{' + entryEnvironment + '}\n'
    result += '\n\\item\n\\begin{' + problemsetEnvironment + '}\n' + self.text + r'\end{' + problemsetEnvironment + '}\n'

    if (self.getnext() is None) or (self.getnext().tag == 'footer'):
        # Last entry in problem set
        result += '\n' + r'\end{' + entriesEnvironment + '}\n' + columnsEnd

    return result
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises//problem-set/header</xpath>
    <children>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'ExercisesProblemsetHeader'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises//problem-set/footer</xpath>
    <children>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'ExercisesProblemsetFooter'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises//problem-set/entry</xpath>
    <children>
      <any-number from="0"><!-- FIXME: This is a hack since multiple shortcodes have to point to the same thing in some exercises. This needs to become stricter since we cannot render multiple shortcodes in the book for one exercises. -->
	<element>shortcode</element>
      </any-number>
      <element>problem</element>
      <element>solution</element>
      <optional>correct</optional>
    </children>
    <notext/>
    <validation-callback>problemset_entry_contains_correct_and_shortcode</validation-callback>
    <conversion-callback name="latex">
problemsetEnvironment = 'ExercisesProblemset'
#entryEnvironment = 'ExercisesProblemsetEntry' # HACK to solve number scrunching problem
entriesEnvironment = 'enumerate' # 'ExercisesProblemsetEntries' # HACK to solve number scrunching problem

columnCount = int(self.getparent().attrib['{http://siyavula.com/cnxml/style/0.1}columns'])
if columnCount > 1:
    columnsBegin = r'\begin{ExercisesProblemsetColumns}{' + str(columnCount) + '}\n'
    columnsEnd = '\\end{ExercisesProblemsetColumns}\n'
else:
    columnsBegin = ''
    columnsEnd = ''

count = int(self.getparent().attrib.get('problem-set-entry-count', 0)) + 1
self.getparent().attrib['problem-set-entry-count'] = str(count)
if count == 1:
    # First entry in problem set
    result = '\n' + columnsBegin + r'\begin{' + entriesEnvironment + '}'
else:
    result = ''

# HACK to solve number scrunching problem
#result += '\n\\begin{' + entryEnvironment + '}\n' + self.text + r'\end{' + entryEnvironment + '}'
result += '\n\item ' + self.text

if (self.getnext() is None) or (self.getnext().tag == 'footer'):
    # Last entry in problem set
    result += '\n' + r'\end{' + entriesEnvironment + '}\n' + columnsEnd
return result
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises//problem-set/entry/shortcode</xpath>
    <validation-callback>is_exercise_shortcode</validation-callback>
    <conversion-callback name="latex">
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises//problem-set/entry/problem</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
environment = 'ExercisesProblemsetEntryProblem'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises//problem-set/entry/solution</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>url</name>
	<type>url</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
if self.text.strip():
    warning_message("Empty solution.")

renderSolutions = False # Put full solutions in textbook?

if renderSolutions:
    environment = 'ExercisesProblemsetEntrySolution'
    return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
else:
    return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises//problem-set/entry/correct</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//definition</xpath>
    <children>
      <element>term</element>
      <element>meaning</element>
    </children>
    <notext/>
    <conversion-callback name="latex"><!-- type already creates start of environment -->
environment = 'Definition'
return '\n\\begin{' + environment + '}{' + self.attrib['title'] + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//definition/term</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//definition/meaning</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//theorem</xpath>
    <children>
      <optional>label</optional>
      <optional>title</optional>
      <element>statement</element>
      <element>given</element>
      <element>required</element>
      <element>proof</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'Theorem'
return r'''
\begin{''' + environment + '}{' + self.attrib.get('theoremLabel', 'Theorem') + ': ' + self.attrib.get('theoremTitle','') + '''}
''' + self.text + r'''
\end{''' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//theorem/label</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['theoremLabel'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//theorem/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['theoremTitle'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//theorem/statement</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
environment = 'TheoremStatement'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//theorem/given</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
environment = 'TheoremGiven'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//theorem/required</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
environment = 'TheoremRequired'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//theorem/proof</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
environment = 'TheoremProof'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//activity</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>type</name>
	<type>enum("activity","groupdiscussion","casestudy","investigation","f_experiment","i_experiment","g_experiment","project")</type>
      </entry>
    </attributes>
    <children>
      <optional>title</optional>
      <reference>block-element</reference>
    </children>
    <notext/>
    <conversion-callback name="latex"><!-- type already creates start of environment -->
activityType = self.attrib['type']
if activityType == 'f_experiment':
    environment = 'ActivityFormalexperiment'
elif activityType == 'g_experiment':
    environment = 'ActivityGeneralexperiment'
elif activityType == 'i_experiment':
    environment = 'ActivityInformalexperiment'
else:
    environment = 'Activity' + activityType.capitalize()
return '\n\\begin{' + environment + '}{' + self.attrib.get('title', '') + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//activity/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//note</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>type</name>
	<type>enum("note","tip","aside","warning","important")</type>
      </entry>
    </attributes>
    <children>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
    <conversion-callback name="latex"><!-- type already creates start of environment -->
environment = 'Note' + self.attrib['type'].capitalize()
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//math_identity</xpath>
    <children>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
    <conversion-callback name="latex"><!-- type already creates start of environment -->
environment = 'Mathidentity'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//math_extension</xpath>
    <children>
      <element>title</element>
      <element>body</element>
    </children>
    <notext/>
    <conversion-callback name="latex"><!-- type already creates start of environment -->
environment = 'Mathextension'
return '\n\\begin{' + environment + '}{' + self.attrib['title'] + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//math_extension/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//math_extension/body</xpath>
    <children>
      <reference>block-element-no-subsections</reference>
    </children>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//linked-concepts</xpath>
    <children>
      <any-number from="1">
	<element>concept</element>
      </any-number>
    </children>
    <notext/>
    <conversion-callback name="latex">
return r'\paragraph{Key Mathematics Concepts} \begin{itemize}' + '\n' + self.text.strip() + '\n' + r'\end{itemize}' + '\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//linked-concepts/concept</xpath>
    <children>
      <element>text</element>
      <element>subject</element>
      <element>grade</element>
      <element>chapter</element>
      <optional>shortcode</optional>
    </children>
    <notext/>
    <conversion-callback name="latex">
return r'\item ' + self.text + '\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//linked-concepts/concept/text</xpath>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//linked-concepts/concept/subject</xpath>
    <validation-callback>is_subject</validation-callback>
    <conversion-callback name="latex">
subject = self.text.strip().lower()
return u' — ' + {'maths': 'Mathematics', 'science': 'Physical Sciences'}[subject]
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//linked-concepts/concept/grade</xpath>
    <validation-callback>is_integer</validation-callback>
    <conversion-callback name="latex">
return ', Grade %i'%(int(self.text))
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//linked-concepts/concept/chapter</xpath>
    <conversion-callback name="latex">
return ', ' + self.text.capitalize()
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//linked-concepts/concept/shortcode</xpath>
    <validation-callback>is_section_shortcode</validation-callback>
    <conversion-callback name="latex">
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//key-concepts</xpath>
    <children>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'Keyconcepts'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//new-words</xpath>
    <children>
      <any-number>
	<element>word</element>
      </any-number>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'Newwords'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//new-words/word</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
environment = 'NewwordsWord'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

<!-- Start of Monassis template spec -->

  <entry>
    <xpath>/document/content//monassis-template</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>rendered-as</name>
	<type>enum("example","exercise")</type>
	<default>exercise</default>
      </entry>
    </attributes>
    <children>
      <element>title</element>
      <element>content</element>
    </children>
    <notext/>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/content</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>repeat-problem</name>
	<type>number</type>
	<default>1</default>
      </entry>
    </attributes>
    <children>
      <optional>header</optional>
      <element>problem</element>
      <optional>response</optional>
      <element>solution</element>
    </children>
    <notext/>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/content/header</xpath>
    <children>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/content/problem</xpath>
    <children>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/content/response</xpath>
    <children>
      <element>type</element>
      <element>marks</element>
      <element>correct</element>
      <element>query</element>
    </children>
    <notext/>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/content/response/type</xpath>
    <children>
      <any-number>
	<element>value</element>
      </any-number>
    </children>
    <notext/>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/content/response/type/value</xpath>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/content/response/marks</xpath>
    <children>
      <any-number>
	<element>value</element>
      </any-number>
    </children>
    <notext/>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/content/response/marks/value</xpath>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/content/response/correct</xpath>
    <children>
      <any-number>
	<element>value</element>
      </any-number>
    </children>
    <notext/>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/content/response/correct/value</xpath>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/content/response/query</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections-with-input</reference>
	<reference>inline-element-with-input</reference>
      </one-of>
    </children>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/content/response/query//input</xpath>
    <notext/>
  </entry>

  <entry id="block-element-no-subsections-with-input">
    <children>
      <any-number>
	<one-of>
	  <reference>block-element-no-subsections</reference>
	  <element>input</element>
	</one-of>
      </any-number>
    </children>
  </entry>

  <entry id="inline-element-with-input">
    <children>
      <any-number>
	<one-of>
	  <reference>inline-element</reference>
	  <element>input</element>
	</one-of>
      </any-number>
    </children>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/content/solution</xpath>
    <children>
      <one-of>
	<any-number>
	  <element>step</element>
	</any-number>
	<reference>block-element-no-subsections</reference>
      </one-of>
    </children>
    <notext/>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/content/solution/step</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>marks</name>
	<type>number</type>
	<default>1</default>
      </entry>
    </attributes>
    <children>
      <optional>title</optional>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
  </entry>

  <entry>
    <xpath>/document/content//monassis-template/content/solution/step/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
  </entry>

<!-- End of Monassis template spec -->

  <entry>
    <xpath>/document/content//worked_example</xpath>
    <children>
      <element>title</element>
      <element>question</element>
      <element>answer</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'Workedexample'
return '\n\\begin{' + environment + '}{' + self.attrib['title'] + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//worked_example/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//worked_example/question</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
if self.text is None:
    raise ValueError, "Worked example question should not be empty."
environment = 'WorkedexampleQuestion'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//worked_example/answer</xpath>
    <children>
      <one-of>
	<any-number from="1">
	  <element>workstep</element>
	</any-number>
	<reference>block-element-no-subsections</reference>
      </one-of>
    </children>
    <notext/>
    <conversion-callback name="latex">
if self.text is None:
    raise ValueError, "Worked example answer should not be empty."
environment = 'WorkedexampleAnswer'
return '\n\\begin{' + environment + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//worked_example/answer/workstep</xpath>
    <children>
      <element>title</element>
      <reference>block-element-no-subsections</reference>
    </children>
    <notext/>
    <conversion-callback name="latex">
environment = 'WorkedexampleAnswerWorkstep'
return '\n\\begin{' + environment + '}{' + self.attrib['title'] + '}\n' + self.text + r'\end{' + environment + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//worked_example/answer/workstep/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//presentation</xpath>
    <children>
      <unordered>
	<element>title</element>
	<optional>shortcode</optional>
	<element>url</element>
      </unordered>
    </children>
    <conversion-callback name="latex">
return r'\presentation{' + self.attrib.get('shortcode', 'SHORTCODE') + '}{' + self.attrib.get('title', 'TITLE') + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//presentation/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//presentation/shortcode</xpath>
    <validation-callback>is_rich_media_shortcode</validation-callback>
    <conversion-callback name="latex">
self.getparent().attrib['shortcode'] = self.text
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//presentation/url</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//simulation</xpath>
    <children>
      <unordered>
	<element>title</element>
	<optional>shortcode</optional>
	<element>url</element>
	<element>embed</element>
	<optional>width</optional>
	<optional>height</optional>
      </unordered>
    </children>
    <validation-callback>simulation_has_url_or_embed</validation-callback>
    <conversion-callback name="latex">
return r'\simulation{' + self.attrib.get('shortcode', 'SHORTCODE') + '}{' + self.attrib.get('title', 'TITLE') + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//simulation/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//simulation/shortcode</xpath>
    <validation-callback>is_rich_media_shortcode</validation-callback>
    <conversion-callback name="latex">
self.getparent().attrib['shortcode'] = self.text
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//simulation/width</xpath>
    <validation-callback>is_integer</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//simulation/height</xpath>
    <validation-callback>is_integer</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//simulation/url</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//simulation/embed</xpath>
    <validation-callback>is_valid_html</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//video</xpath>
    <children>
      <unordered>
	<element>title</element>
	<any-number from="1"><!-- with multiple urls, the first one will be linked to and the rest are for reference only -->
	  <element>url</element>
	</any-number>
	<optional>shortcode</optional>
	<optional>width</optional>
	<optional>height</optional>
      </unordered>
    </children>
    <conversion-callback name="latex">
return r'\video{' + self.attrib.get('shortcode', 'SHORTCODE') + '}{' + self.attrib.get('title', 'TITLE') + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//video/title</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['title'] = self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//video/shortcode</xpath>
    <validation-callback>is_rich_media_shortcode</validation-callback>
    <conversion-callback name="latex">
self.getparent().attrib['shortcode'] = self.text
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//video/url</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//video/width</xpath>
    <validation-callback>is_integer</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//video/height</xpath>
    <validation-callback>is_integer</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//figure</xpath>
    <children>
      <element>type</element>
      <any-number from="1">
	<one-of>
	  <element>table</element>
	  <element>pspicture</element>
	  <element>tikzpicture</element>
	  <element>image</element>
	  <element>para</element>
	  <element>equation</element>
	  <element>latex</element>
	</one-of>
      </any-number>
      <optional>caption</optional>
    </children>
    <notext/>
    <conversion-callback name="latex"><!-- type already creates start of environment -->
environment = 'Figure' + self.attrib['type'].capitalize()
result = '\n\\begin{' + environment + '}\n' + self.text
id = self.attrib.get('id')
if id is not None:
    result += r'\label{' + id + '}\n'
result += r'\end{' + environment + '}\n'
return result
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//pspicture</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>style:width</name>
	<type>number</type>
	<default/>
      </entry>
      <entry>
	<name>crop</name>
	<type>enum("true","false")</type>
	<default>false</default>
      </entry>
    </attributes>
    <children>
      <any-number>
	<element>usepackage</element>
      </any-number>
      <element>code</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
redBoundingBox = False # Put red frame at bounding box of every pspicture?

if self.attrib['crop'] == 'true':
    pspictureEnvironment = 'pspicture*'
else:
    pspictureEnvironment = 'pspicture'

tableMode = ('table' in utils.get_full_dom_path(self))
if tableMode:
    head = ''
    tail = ''
else:
    head = '\\begin{Image}\n'
    tail = '\\end{Image}\n'
if self.attrib.get('{http://siyavula.com/cnxml/style/0.1}width') is not None:
    relativeWidth = float(self.attrib.get('{http://siyavula.com/cnxml/style/0.1}width'))
    # Get width of pspicture
    start = self.text.find('(')+1
    stop = self.text.find(',', start)
    xmin = float(self.text[start:stop])
    start = self.text.find('(', stop)+1
    stop = self.text.find(',', start)
    xmax = float(self.text[start:stop])
    pspictureWidthInCm = xmax-xmin
    pspictureWidthInPt = pspictureWidthInCm * 28.3464567
    head += r'\FPdiv\scaleparam{\getlengthinpt{\textwidth}}{' + str(pspictureWidthInPt/relativeWidth) + r'}\par\par\scalebox{\scaleparam}{\begin{' + pspictureEnvironment + '}'
    tail = r'\end{' + pspictureEnvironment + '}}\n' + tail
else:
    head += r'\par\begin{' + pspictureEnvironment + '}'
    tail = r'\end{' + pspictureEnvironment + '}\n' + tail

if redBoundingBox:
    start = self.text.find('(')
    stop = self.text.find(')', start)
    stop = self.text.find(')', stop+1)+1
    nextLine = self.text.find('\n', stop)+1
    text = self.text[:nextLine] + r'\psframe[linecolor=red]' + self.text[start:stop] + '\n' + self.text[nextLine:]
else:
    text = self.text

return head + text + tail
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//pspicture/usepackage</xpath>
    <conversion-callback name="latex">
if self.text.strip() not in ['pst-solides3d', 'pst-3dplot', 'pst-node']:
    warning_message('REQUIRED PSTRICKS PACKAGE: ' + self.text)
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//pspicture/code</xpath>
    <children>
      <any-number>
	<one-of>
	  <element>unit_number</element>
	  <element>number</element>
	  <element>unit</element>
	  <element>percentage</element>
	  <element>currency</element>
	  <element>chem_compound</element>
	  <element>spec_note</element>
	  <element>nuclear_notation</element>
	  <element>nth</element>
	</one-of>
      </any-number>
    </children>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//tikzpicture</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>style:width</name>
	<type>number</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <any-number>
	<element>usepackage</element>
      </any-number>
      <element>code</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
tableMode = ('table' in utils.get_full_dom_path(self))
if tableMode:
    head = ''
    tail = ''
else:
    head = '\\begin{Image}\n'
    tail = '\\end{Image}\n'
if self.attrib.get('{http://siyavula.com/cnxml/style/0.1}width') is not None:
    warning_message('UNHANDLED style:width in tikzpicture')
return head + r'\par\begin{tikzpicture}' + self.text + r'\end{tikzpicture}' + '\n' + tail
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//tikzpicture/usepackage</xpath>
    <conversion-callback name="latex">
warning_message('REQUIRED TIKZ PACKAGE: ' + self.text)
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//tikzpicture/code</xpath>
    <children>
      <any-number>
	<one-of>
	  <element>unit_number</element>
	  <element>number</element>
	  <element>unit</element>
	  <element>percentage</element>
	  <element>currency</element>
	  <element>chem_compound</element>
	  <element>spec_note</element>
	  <element>nuclear_notation</element>
	  <element>nth</element>
	</one-of>
      </any-number>
    </children>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//image</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>style:width</name>
	<type>number</type>
	<default/>
      </entry>
      <!--<entry>
	<name>style:format</name>
	<type>string</type>
	<default/>
      </entry>-->
    </attributes>
    <children>
      <subset-of>
        <element>src</element>
        <element>attribution</element>
      </subset-of>
    </children>
    <notext/>
    <conversion-callback name="latex">
tableMode = ('table' in utils.get_full_dom_path(self))
if tableMode:
    head = ''
    tail = ''
else:
    head = '\\begin{Image}\n'
    tail = '\\end{Image}\n'
result = r'\includegraphics'
width = self.attrib.get('{http://siyavula.com/cnxml/style/0.1}width')
if width is not None:
    result += r'[width=%s\textwidth]'%width
result += '{' + self.attrib['src'] + '}\n'
if self.attrib.has_key('attribution'):
    result += r'\ImageAttribution{' + self.attrib['attribution'] + '}\n'
return head + result + tail
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//image/src</xpath>
    <conversion-callback name="latex">
self.getparent().attrib['src'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//image/attribution</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
self.getparent().attrib['attribution'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//figure/type</xpath>
    <validation-callback>is_figure_type</validation-callback>
    <conversion-callback name="latex">
self.getparent().attrib['type'] = self.text.strip()
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//figure/caption</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
return r'  \Caption{' + self.text + '}\n'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//equation</xpath>
    <children>
      <element>m:math</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//latex</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>display</name>
	<type>enum("inline","block")</type>
	<default>inline</default>
      </entry>
    </attributes>
    <children>
      <any-number>
	<one-of>
	  <element>number</element>
	  <element>unit</element>
	  <element>unit_number</element>
	  <element>percentage</element>
	  <element>currency</element>
	  <element>correct</element>
	</one-of>
      </any-number>
    </children>
    <conversion-callback name="latex">
# First check that there aren't any funny functions
unslashedFunctions = latex_math_function_check(self.text)
if len(unslashedFunctions) > 0:
    warning_message('Found the following functions: (%s) without a backslash in a latex element:\n%s'%(', '.join(unslashedFunctions), self.text))

numberEquations = False
if self.attrib['display'] == 'inline':
    return r'\(' + self.text.strip() + r'\)'
else:
    foundMathEnvironment = False
    text = self.text.strip()
    for environmentName in ['align', 'align*', 'equation', 'equation*', 'eqnarray', 'eqnarray*']:
        beginSubstr = r'\begin{%s}'%environmentName
        if text[:len(beginSubstr)] == beginSubstr:
            endSubstr = r'\end{%s}'%environmentName
            if text[-len(endSubstr):] != endSubstr:
                error_message('You are either missing a \\end{%s} in a LaTeX environment or there is a mismatch between the \\begin and \\end.'%environmentName)
            if environmentName in ['eqnarray', 'eqnarray*']:
                warning_message('You should really be using align rather eqnarray in your &lt;latex&gt; elements')
            foundMathEnvironment = True
            if not numberEquations:
                if environmentName[-1] != '*':
                    text = beginSubstr[:-1] + '*}' + text[len(beginSubstr):-len(endSubstr)] + endSubstr[:-1] + '*}'
                    beginSubstr = beginSubstr[:-1] + '*}'
                    endSubstr = endSubstr[:-1] + '*}'
            break
    if not foundMathEnvironment:
        return '\\[' + text + '\\]\n'
    else:
        environmentsWithAmpersands = {'align': 1, 'align*': 1, 'eqnarray': 2, 'eqnarray*': 2}
        if environmentName in environmentsWithAmpersands:
            # Check number of ampersands per line
            ampersands = environmentsWithAmpersands[environmentName]
            lines = text.split('\\\\')
            for lineIndex in range(len(lines)):
                line = lines[lineIndex].strip()
                if line.count('&amp;') &gt; ampersands:
                    error_message('Extra ampersands (expected %i) in aligned equation: %s'%(ampersands, line))
                if (lineIndex == len(lines)-1) and (line == endSubstr):
                    error_message('Extra \\\\ at end of aligned equation: %s'%(text.strip()))
        return text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//m:math</xpath>
    <children>
      <reference>math-stuff</reference>
    </children>
    <notext/>
    <conversion-callback name="latex">
tex = mathml_transform(self)
tex = unicode(tex).replace('$', '')
if tex.count(r'\left') != tex.count(r'\right'):
    tex = tex.replace(r'\left', '').replace(r'\right', '')

# replace the stackrel{^} with hat
tex = tex.replace(r'\stackrel{^}', r'\hat')

# fix the \times symbol
tex = tex.replace(u'×', r'\times ')

# fix the trig functions too
for func in ['sin', 'cos', 'tan', 'cot']:
    tex = tex.replace(' ' + func, '\\' + func + ' ')

# Check that there aren't any funny functions
unslashedFunctions = latex_math_function_check(tex)
if len(unslashedFunctions) > 0:
    warning_message('Found the following functions: (%s) without a backslash in a m:math element (converted to LaTeX):\n%s'%(', '.join(unslashedFunctions), tex))

return r'\(' + tex + r'\)'
    </conversion-callback>
  </entry>

  <entry><xpath>/document/content//m:mrow</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mfrac</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mfenced</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mi</xpath><children><reference>math-stuff</reference></children><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mo</xpath><children><reference>math-stuff</reference></children><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mn</xpath><children><reference>math-stuff</reference></children><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mtable</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mtr</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mtd</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mtext</xpath><children><reference>math-stuff</reference></children><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:msub</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:msup</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:msubsup</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mspace</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mphantom</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mstyle</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mover</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:msqrt</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:munder</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:munderover</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mroot</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>
  <entry><xpath>/document/content//m:mref</xpath><children><reference>math-stuff</reference></children><notext/><conversion-callback name="latex"/></entry>

  <entry id="math-stuff">
    <children>
      <any-number>
	<one-of>
	  <element>m:mrow</element>
	  <element>m:mfrac</element>
	  <element>m:mfenced</element>
	  <element>m:mi</element>
	  <element>m:mo</element>
	  <element>m:mn</element>
	  <element>m:mtable</element>
	  <element>m:mtr</element>
	  <element>m:mtd</element>
	  <element>m:mtext</element>
	  <element>m:msub</element>
	  <element>m:msup</element>
	  <element>m:msubsup</element>
	  <element>m:mspace</element>
	  <element>m:mphantom</element>
	  <element>m:mstyle</element>
	  <element>m:mover</element>
	  <element>m:msqrt</element>
	  <element>m:munder</element>
	  <element>m:munderover</element>
	  <element>m:mroot</element>
	  <element>m:mref</element>
	</one-of>
      </any-number>
    </children>
  </entry>

  <entry id="block-element">
    <children>
      <any-number>
	<one-of>
	  <element>section</element>
	  <reference>block-element-no-subsections-entry</reference>
	</one-of>
      </any-number>
    </children>
  </entry>

  <entry id="block-element-no-subsections">
    <children>
      <any-number>
	<reference>block-element-no-subsections-entry</reference>
      </any-number>
    </children>
  </entry>

  <entry id="block-element-no-subsections-entry">
    <children>
      <one-of>
	<element>para</element>
	<element>video</element>
	<element>presentation</element>
	<element>simulation</element>
	<element>list</element>
	<element>equation</element>
	<element>latex</element>
	<element>worked_example</element>
	<element>monassis-template</element>
	<element>figure</element>
	<element>image</element>
	<element>pspicture</element>
	<element>tikzpicture</element>
	<element>table</element>
	<element>definition</element>
	<element>theorem</element>
	<element>activity</element>
	<element>exercises</element>
	<element>note</element>
	<element>math_extension</element>
	<element>math_identity</element>
	<element>key-concepts</element>
	<element>new-words</element>
	<element>linked-concepts</element>
	<element>teachers-guide</element>
	<element>correct</element>

	<element>todo</element><!-- This needs to go away before publising the print textbooks -->
      </one-of>
    </children>
  </entry>

  <entry id="inline-container-element">
    <children>
      <any-number>
	<one-of>
	  <element>br</element>
	  <element>chem_compound</element>
	  <element>correct</element>
	  <element>currency</element>
	  <element>emphasis</element>
	  <element>image</element>
	  <element>latex</element>
	  <element>link</element>
	  <element>list</element>
	  <element>m:math</element>
	  <element>nth</element>
	  <element>nuclear_notation</element>
	  <element>number</element>
	  <element>percentage</element>
	  <element>spec_note</element>
	  <element>sub</element>
	  <element>sup</element>
	  <element>unit_number</element>
	  <element>unit</element>

	  <element>todo</element><!-- This needs to go away before publising the print textbooks -->
	</one-of>
      </any-number>
    </children>
  </entry>

  <entry id="inline-element">
    <children>
      <any-number>
	<one-of>
	  <element>br</element>
	  <element>chem_compound</element>
	  <element>correct</element>
	  <element>currency</element>
	  <element>emphasis</element>
	  <element>image</element>
	  <element>latex</element>
	  <element>link</element>
	  <element>m:math</element>
	  <element>nth</element>
	  <element>nuclear_notation</element>
	  <element>number</element>
	  <element>percentage</element>
	  <element>spec_note</element>
	  <element>sub</element>
	  <element>sup</element>
	  <element>unit_number</element>
	  <element>unit</element>
	</one-of>
      </any-number>
    </children>
  </entry>

  <entry>
    <xpath>/document/content//unit_number</xpath>
    <children>
      <element>number</element>
      <element>unit</element>
    </children>
    <notext/>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <!-- //currency/number shadows //number -->
  <entry>
    <xpath>/document/content//currency/number</xpath>
    <validation-callback>is_float</validation-callback>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//number</xpath>
    <children>
      <subset-of>
	<element>coeff</element>
	<element>base</element>
	<element>exp</element>
      </subset-of>
    </children>
    <validation-callback>is_number</validation-callback>
    <conversion-callback name="latex">
if len(self) == 0:
    if 'e' in self.text:
        # Number in exponential notation: convert to coeff and exp
        numberText = self.text.strip()
        self.text = None
        self.append(etree.Element('coeff'))
        pos = numberText.find('e')
        self[-1].text = numberText[:pos]
        self.append(etree.Element('exp'))
        self[-1].text = str(int(numberText[pos+1:]))
    else:
        # No children, means it's just a plain number
        numberText = self.text.strip()
        self.text = None
        self.append(etree.Element('coeff'))
        self[-1].text = numberText

# Parse out coefficient, base and exponent
nodes = {}
text = {}
for key in ['coeff', 'exp', 'base']:
    nodes[key] = self.find(key)
    text[key] = nodes[key].text.strip() if nodes[key] is not None else None
if text['base'] is None:
    text['base'] = '10'
for key in text:
    if text[key] is None: continue
    if text[key][0] == '-':
        minus = '-'
        text[key] = text[key][1:]
    else:
        minus = ''
    text[key] = minus + r'\text{' + utils.format_number(text[key], thousandsSeparator=r'\ ') + '}'

# Build LaTeX representation
result = text['coeff'] if nodes['coeff'] is not None else ''
if nodes['exp'] is not None:
    if nodes['coeff'] is not None:
        result += r' \times '
    result += text['base'] + '^{' + text['exp'] + '}'

# Check whether already in math mode
latexMode = ('latex' in utils.get_full_dom_path(self))
if not latexMode:
    result = r'\(' + result + r'\)'

return result
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//number/coeff</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//number/base</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//number/exp</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//unit</xpath>
    <children>
      <any-number>
	<element>sup</element>
      </any-number>
    </children>
    <validation-callback>is_unit</validation-callback>
    <conversion-callback name="latex">
unitsWithoutSpace = [u'°']
inUnitNumber = (self.getparent().tag == 'unit_number')
result = r'\text{' + self.text + '}'
# Check whether already in math mode
latexMode = ('latex' in utils.get_full_dom_path(self))
if not latexMode:
    result = r'\(' + result + r'\)'
    if inUnitNumber and (self.text[0] not in unitsWithoutSpace):
        result = '~' + result
else:
    if inUnitNumber and (self.text[0] not in unitsWithoutSpace):
        assert result[:6] == r'\text{', "Weird error in /document/content//unit conversion."
        result = result[:6] + ' ' + result[6:]
return result
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//unit/sup</xpath>
    <validation-callback>is_number</validation-callback>
    <conversion-callback name="latex">
return '$^{' + self.text + '}$'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//percentage</xpath>
    <validation-callback>is_float</validation-callback>
    <conversion-callback name="latex">
return convert_using(self, '/document/content//number') + r'\%'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//currency</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>precision</name>
	<type>integer</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <unordered>
	<optional>symbol</optional>
	<element>number</element>
      </unordered>
    </children>
    <notext/>
    <conversion-callback name="latex">
numberText = self.find('number').text.strip()
try:
    int(numberText.strip())
    defaultPrecision = 0
except ValueError:
    defaultPrecision = 2
currencyPrecision = int(self.attrib.get('precision', defaultPrecision))
numberText = ("%%.%if"%currencyPrecision)%float(numberText)
numberText = utils.format_number(numberText, thousandsSeparator=r'\ ')

symbolNode = self.find('symbol')
if symbolNode is None:
    symbol = 'R'
    symbolLocation = 'front'
else:
    symbol = symbolNode.text.strip()
    symbolLocation = symbolNode.attrib.get('location', 'front')



if symbolLocation == 'front':
    result = symbol + r'\ ' + numberText
else:
    result = numberText + r'\ ' + symbol
result = r'\text{' + result + '}'

# Check whether already in math mode
latexMode = ('latex' in utils.get_full_dom_path(self))
if not latexMode:
    result = r'\(' + result + r'\)'

return result
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//currency/symbol</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>location</name>
	<type>enum("front","back")</type>
	<default>front</default>
      </entry>
    </attributes>
  </entry>

  <entry>
    <xpath>/document/content//chem_compound</xpath>
    <conversion-callback name="latex">
text = self.text.strip()
pos = 0
while pos &lt; len(text):
    if text[pos].isalpha():
        start = pos
        pos += 1
        while (pos &lt; len(text)) and text[pos].isalpha():
            pos += 1
        text = text[:start] + r'\text{' + text[start:pos] + '}' + text[pos:]
        pos += 7
    else:
        pos += 1
latexMode = ('latex' in utils.get_full_dom_path(self))
if not latexMode:
    text = r'\(' + text + r'\)'
return text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//spec_note</xpath>
    <conversion-callback name="latex">
return convert_using(self, '/document/content//chem_compound')
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//nuclear_notation</xpath>
    <children>
      <unordered>
	<element>symbol</element>
	<element>mass_number</element>
	<element>atomic_number</element>
      </unordered>
    </children>
    <notext/>
    <validation-callback>is_nuclear_notation</validation-callback>
    <conversion-callback name="latex">
latex = r'_{%s}^{%s}\text{%s}'%(self.find('atomic_number').text, self.find('mass_number').text, self.find('symbol').text)
latexMode = ('latex' in utils.get_full_dom_path(self))
if not latexMode:
    latex = r'\(' + latex + r'\)'
return latex
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//nuclear_notation/symbol</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//nuclear_notation/mass_number</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//nuclear_notation/atomic_number</xpath>
    <conversion-callback name="latex"/>
  </entry>

  <entry>
    <xpath>/document/content//br</xpath>
    <notext/>
    <conversion-callback name="latex">
return r'\\'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//emphasis</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>effect</name>
	<type>enum("bold","italics","underline","smallcaps","normal")</type>
	<default>bold</default>
      </entry>
    </attributes>
    <children>
      <reference>inline-element</reference>
    </children>
    <conversion-callback name="latex">
pattern = {
    'bold': r'\textbf{%s}',
    'italics': r'\textit{%s}',
    'underline': r'\underline{%s}',
    'smallcaps': r'\textsc{%s}',
    'normal': '%s',
}[self.attrib['effect']]
return pattern%self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//exercises//problem-set/entry/solution//correct</xpath>
    <children>
      <one-of>
	<reference>block-element-no-subsections</reference>
	<reference>inline-element</reference>
      </one-of>
    </children>
    <conversion-callback name="latex">
return self.text
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//nth</xpath>
    <attributes>
      <entry>
	<name>format</name>
	<type>enum("word","superscript")</type>
	<default>word</default>
      </entry>
    </attributes>
    <conversion-callback name="latex">
try:
    value = int(self.text)
    isInt = True
except ValueError:
    value = self.text.strip()
    isInt = False

format = self.attrib['format']
if (format == 'word') and isInt and (value &lt; 12):
    return ['first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth', 'eleventh'][value-1]
else:
    # format == 'superscript'
    if isInt:
        if (value % 10 == 1) and (value//10 % 10 != 1):
            suffix = 'st'
        elif (value % 10 == 2) and (value//10 % 10 != 1):
            suffix = 'nd'
        elif (value % 10 == 3) and (value//10 % 10 != 1):
            suffix = 'rd'
        else:
            suffix = 'th'
        value = str(value)
    else:
        suffix = 'th'
    return r'\(' + value + r'^{\text{' + suffix + r'}}\)'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//link</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>url</name>
	<type>url</type>
	<default/>
      </entry>
      <entry>
	<name>target-id</name>
	<type>string</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <reference>inline-element</reference>
    </children>
    <validation-callback>check_link_element</validation-callback>
    <conversion-callback name="latex">
target = self.attrib.get('target-id')
if target is not None:
    return r'\ref{' + target + '}'
url = self.attrib.get('url')
if url is not None:
    if self.text != '':
        return r'\href{' + escape_latex(url) + '}{' + escape_latex(self.text) + '}'
    else:
        return r'\url{' + escape_latex(url) + '}'
    </conversion-callback>
  </entry>

  <entry>
    <xpath>/document/content//sub</xpath>
    <children>
      <reference>inline-element</reference>
    </children>
  </entry>

  <entry>
    <xpath>//its:rules</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>version</name>
	<type>string</type>
	<default/>
      </entry>
    </attributes>
    <children>
      <any-number>
	<element>its:translateRule</element>
      </any-number>
    </children>
    <notext/>
    <conversion-callback name="latex">
return ''
    </conversion-callback>
  </entry>

  <entry>
    <xpath>//its:rules/its:translateRule</xpath>
    <attributes>
      <entry>
	<name>id</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>translate</name>
	<type>string</type>
	<default/>
      </entry>
      <entry>
	<name>selector</name>
	<type>string</type>
	<default/>
      </entry>
    </attributes>
    <notext/>
    <conversion-callback name="latex">
return ''
    </conversion-callback>
  </entry>

</spec>
